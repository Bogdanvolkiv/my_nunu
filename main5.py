# Определение функции-генератора для вычисления квадратов чисел
def generator_function(n: int) -> Iterator[int]:
"""
Генератор для вывода квадратов чисел от 1 до n.
:param n: Число, до которого генерируются квадраты
(включительно).
:return: Возвращает квадрат текущего числа в каждой итерации.
"""# Цикл для генерации квадратов чисел от 1 до n
for number in range(1, n + 1):
# Генерация квадрата текущего числа и возврат его с помощью
yield
yield number ** 2
# Основная функция программы
def main() -> None:
"""
Основная функция. Запрашивает ввод числа N, выводит квадраты
чисел двумя способами.
:return: None
"""
# Запрос у пользователя числа N
n = int(input('Введите число N: '))
# Вывод квадратов с использованием функции-генератора
print('Вывод квадратов. Функция-генератор')
# Использование функции-генератора для вывода квадратов чисел от
1 до n
for square in generator_function(n):
print(square, end=' ')
print('\n') # Переход на новую строку после вывода всех
квадратов
# Вывод квадратов с использованием генераторного выражения
print('Вывод квадратов. Генераторное выражение')
# Генераторное выражение для вычисления квадратов чисел от 1 до
n
generator_expr = (i ** 2 for i in range(1, n + 1))
# Использование генераторного выражения для вывода квадратов
чисел от 1 до n
for square in generator_expr:
print(square, end=' ')
print() # Переход на новую строку после вывода всех квадратов
# Запуск основной функции
main()def calculate_bonus(names, salary, bonus):
"""
Рассчитывает бонус для каждого сотрудника.
:param names: Список имен сотрудников.
:param salary: Список зарплат сотрудников.
:param bonus: Список премий в процентах.
:return: Словарь с именем сотрудника в качестве ключа и суммой
премии в качестве значения.
"""
# Генератор словаря для расчета бонуса: имя сотрудника -> сумма
премии
result = {names[i]: round(salary[i] * float(bonus[i].strip('%'))
/ 100, 2) for i in range(len(names))}
return result
# Пример использования функции
names = ["Alice", "Bob", "Charlie"]
salary = [5000, 6000, 7000]
bonus = ["10%", "5%", "15%"]
result = calculate_bonus(names, salary, bonus)
print(result)
def fibonacci(n):
# Начальные значения последовательности Фибоначчи: 0 и 1
a, b = 0, 1
# Генерация первых n чисел Фибоначчи
for _ in range(n):
yield a # Возвращаем текущее значение a
a, b = b, a + b # Обновляем значения a и b для следующей
итерации
# Пример вывода первых 10 чисел Фибоначчи
for number in fibonacci(10):
print(number)def substrings(s):
"""
Генератор всех возможных подстрок строки s.
:param s: Строка, из которой будут извлекаться подстроки
:return: Генератор подстрок
"""
length = len(s)
# Генерируем подстроки, начиная с каждой позиции в строке
for start in range(length):
# Итерируем от текущей позиции до конца строки
for end in range(start + 1, length + 1):
yield s[start:end]
# Пример использования
for substring in substrings('abc'):
print(substring)
